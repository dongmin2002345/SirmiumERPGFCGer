// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryCore.Context;

namespace RepositoryCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191015192551_Status_Dodavanje_Katarina")]
    partial class Status_Dodavanje_Katarina
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DomainCore.Banks.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<string>("Swift");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("AgencyId");

                    b.Property<string>("BetriebsNumber");

                    b.Property<string>("Code");

                    b.Property<string>("CommercialNr");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("ContactPersonGer");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int>("DueDate");

                    b.Property<string>("IBAN");

                    b.Property<string>("IdentificationNumber");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("InternalCode");

                    b.Property<bool>("IsInPDV");

                    b.Property<bool>("IsInPDVGer");

                    b.Property<string>("JBKJS");

                    b.Property<string>("Name");

                    b.Property<string>("NameGer");

                    b.Property<string>("PDV");

                    b.Property<string>("PIB");

                    b.Property<string>("PIO");

                    b.Property<decimal>("Rebate");

                    b.Property<int?>("SectorId");

                    b.Property<int?>("TaxAdministrationId");

                    b.Property<string>("TaxNr");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<DateTime?>("VatDeductionFrom");

                    b.Property<DateTime?>("VatDeductionTo");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SectorId");

                    b.HasIndex("TaxAdministrationId");

                    b.ToTable("BusinessPartners");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber");

                    b.Property<bool>("Active");

                    b.Property<int?>("BankId");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BusinessPartnerBanks");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerBusinessPartnerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("BusinessPartnerId");

                    b.Property<int>("BusinessPartnerTypeId");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("BusinessPartnerTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BusinessPartnerBusinessPartnerTypes");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerByConstructionSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("BusinessPartnerCount");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ConstructionSiteId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("MaxNumOfEmployees");

                    b.Property<DateTime?>("RealEndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConstructionSiteId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BusinessPartnerByConstructionSites");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BusinessPartnerDocuments");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ContactPerson");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Institution");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Note");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BusinessPartnerInstitutions");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<int?>("CityId");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<int?>("MunicipalityId");

                    b.Property<int?>("RegionId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("RegionId");

                    b.ToTable("BusinessPartnerLocations");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Note");

                    b.Property<DateTime>("NoteDate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BusinessPartnerNotes");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerOrganizationUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<int?>("CityId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ContactPerson");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Mobile");

                    b.Property<int?>("MunicipalityId");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("BusinessPartnerOrganizationUnits");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime?>("Birthday");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ContactPersonFirstName");

                    b.Property<string>("ContactPersonLastName");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Mobile");

                    b.Property<string>("Path");

                    b.Property<string>("Phone");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BusinessPartnerPhones");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<bool>("IsBuyer");

                    b.Property<bool>("IsSupplier");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BusinessPartnerTypes");
                });

            modelBuilder.Entity("DomainCore.Common.Companies.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<int?>("CityId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Email");

                    b.Property<string>("IdentificationNumber");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("IndustryCode");

                    b.Property<string>("IndustryName");

                    b.Property<string>("Name");

                    b.Property<string>("PDVNumber");

                    b.Property<string>("PIBNumber");

                    b.Property<string>("PIONumber");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("DomainCore.Common.Companies.CompanyUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("RolesCSV");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyUsers");
                });

            modelBuilder.Entity("DomainCore.Common.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("LastName");

                    b.Property<string>("PasswordHash");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DomainCore.Common.InputInvoices.InputInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<decimal>("AmountGross");

                    b.Property<decimal>("AmountNet");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int>("Currency");

                    b.Property<DateTime>("DateOfPaymet");

                    b.Property<string>("Description");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNumber");

                    b.Property<decimal>("PDV");

                    b.Property<int>("PDVPercent");

                    b.Property<string>("Path");

                    b.Property<string>("Status");

                    b.Property<DateTime>("StatusDate");

                    b.Property<string>("Supplier");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("InputInvoices");
                });

            modelBuilder.Entity("DomainCore.Common.InputInvoices.InputInvoiceDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int?>("InputInvoiceId");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InputInvoiceId");

                    b.ToTable("InputInvoiceDocuments");
                });

            modelBuilder.Entity("DomainCore.Common.InputInvoices.InputInvoiceNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int?>("InputInvoiceId");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Note");

                    b.Property<DateTime>("NoteDate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InputInvoiceId");

                    b.ToTable("InputInvoiceNotes");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int?>("MunicipalityId");

                    b.Property<string>("Name");

                    b.Property<int?>("RegionId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("AlfaCode");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Mark");

                    b.Property<string>("Name");

                    b.Property<string>("NumericCode");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("MunicipalityCode");

                    b.Property<string>("Name");

                    b.Property<int?>("RegionId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RegionId");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<string>("RegionCode");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("DomainCore.Common.OutputInvoices.OutputInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<decimal>("AmountGross");

                    b.Property<decimal>("AmountNet");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int>("Currency");

                    b.Property<DateTime>("DateOfPayment");

                    b.Property<string>("Description");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNumber");

                    b.Property<string>("Path");

                    b.Property<decimal>("Pdv");

                    b.Property<int>("PdvPercent");

                    b.Property<string>("Status");

                    b.Property<DateTime>("StatusDate");

                    b.Property<string>("Supplier");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("OutputInvoices");
                });

            modelBuilder.Entity("DomainCore.Common.OutputInvoices.OutputInvoiceDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Name");

                    b.Property<int?>("OutputInvoiceId");

                    b.Property<string>("Path");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OutputInvoiceId");

                    b.ToTable("OutputInvoiceDocuments");
                });

            modelBuilder.Entity("DomainCore.Common.OutputInvoices.OutputInvoiceNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Note");

                    b.Property<DateTime>("NoteDate");

                    b.Property<int?>("OutputInvoiceId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OutputInvoiceId");

                    b.ToTable("OutputInvoiceNotes");
                });

            modelBuilder.Entity("DomainCore.Common.Prices.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal>("Amount");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("DomainCore.Common.Prices.ServiceDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<string>("URL");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("ServiceDeliverys");
                });

            modelBuilder.Entity("DomainCore.Common.Professions.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<string>("SecondCode");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("DomainCore.Common.Sectors.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<int?>("SectorId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SectorId");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("DomainCore.Common.Sectors.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<string>("SecondCode");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("DomainCore.Common.TaxAdministrations.TaxAdministration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("Address3");

                    b.Property<int?>("Bank1Id");

                    b.Property<int?>("Bank2Id");

                    b.Property<int?>("BankId1");

                    b.Property<int?>("BankId2");

                    b.Property<int?>("CityId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("IBAN1");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<string>("SWIFT");

                    b.Property<string>("SecondCode");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Bank1Id");

                    b.HasIndex("Bank2Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("TaxAdministrations");
                });

            modelBuilder.Entity("DomainCore.Common.ToDos.ToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<Guid>("Identifier");

                    b.Property<bool>("IsPrivate");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<DateTime>("ToDoDate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("ToDos");
                });

            modelBuilder.Entity("DomainCore.ConstructionSites.ConstructionSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<int?>("CityId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("ContractExpiration");

                    b.Property<DateTime>("ContractStart");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("InternalCode");

                    b.Property<int>("MaxWorkers");

                    b.Property<string>("Name");

                    b.Property<DateTime>("ProContractDate");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("ConstructionSites");
                });

            modelBuilder.Entity("DomainCore.ConstructionSites.ConstructionSiteCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ConstructionSiteId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<decimal>("EmployeePrice");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<decimal>("NewValue");

                    b.Property<int>("NumOfEmployees");

                    b.Property<int>("NumOfMonths");

                    b.Property<decimal>("OldValue");

                    b.Property<string>("PlusMinus");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<decimal>("ValueDifference");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConstructionSiteId");

                    b.HasIndex("CreatedById");

                    b.ToTable("ConstructionSiteCalculations");
                });

            modelBuilder.Entity("DomainCore.ConstructionSites.ConstructionSiteDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ConstructionSiteId");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConstructionSiteId");

                    b.HasIndex("CreatedById");

                    b.ToTable("ConstructionSiteDocuments");
                });

            modelBuilder.Entity("DomainCore.ConstructionSites.ConstructionSiteNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ConstructionSiteId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Note");

                    b.Property<DateTime>("NoteDate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConstructionSiteId");

                    b.HasIndex("CreatedById");

                    b.ToTable("ConstructionSiteNotes");
                });

            modelBuilder.Entity("DomainCore.Employees.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<int?>("CityId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ConstructionSiteCode");

                    b.Property<string>("ConstructionSiteName");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime?>("EmbassyDate");

                    b.Property<string>("EmployeeCode");

                    b.Property<int>("Gender");

                    b.Property<Guid>("Identifier");

                    b.Property<int?>("MunicipalityId");

                    b.Property<string>("Name");

                    b.Property<string>("Passport");

                    b.Property<int?>("PassportCityId");

                    b.Property<int?>("PassportCountryId");

                    b.Property<string>("PassportMup");

                    b.Property<int?>("RegionId");

                    b.Property<string>("ResidenceAddress");

                    b.Property<int?>("ResidenceCityId");

                    b.Property<int?>("ResidenceCountryId");

                    b.Property<string>("SurName");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<DateTime?>("VisaDate");

                    b.Property<DateTime?>("VisaFrom");

                    b.Property<DateTime?>("VisaTo");

                    b.Property<DateTime?>("VisaValidFrom");

                    b.Property<DateTime?>("VisaValidTo");

                    b.Property<DateTime?>("WorkPermitFrom");

                    b.Property<DateTime?>("WorkPermitTo");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("PassportCityId");

                    b.HasIndex("PassportCountryId");

                    b.HasIndex("RegionId");

                    b.HasIndex("ResidenceCityId");

                    b.HasIndex("ResidenceCountryId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeByBusinessPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int>("EmployeeCount");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime?>("RealEndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeByBusinessPartners");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeByConstructionSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("BusinessPartnerCount");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ConstructionSiteId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int>("EmployeeCount");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime?>("RealEndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConstructionSiteId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeByConstructionSites");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CardDate");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<int?>("EmployeeId");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("PlusMinus");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeCards");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("EmployeeId");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDocuments");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime?>("EmbassyDate");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("FamilyMemberId");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FamilyMemberId");

                    b.ToTable("EmployeeItems");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeLicence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("EmployeeId");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<int?>("LicenceId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<DateTime?>("ValidFrom");

                    b.Property<DateTime?>("ValidTo");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LicenceId");

                    b.ToTable("EmployeeLicences");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("EmployeeId");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Note");

                    b.Property<DateTime>("NoteDate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeNotes");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeProfession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("EmployeeId");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<int?>("ProfessionId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("EmployeeProfessions");
                });

            modelBuilder.Entity("DomainCore.Employees.FamilyMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("FamilyMembers");
                });

            modelBuilder.Entity("DomainCore.Employees.LicenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Category");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("LicenceTypes");
                });

            modelBuilder.Entity("DomainCore.Employees.PhysicalPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<int?>("CityId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ConstructionSiteCode");

                    b.Property<string>("ConstructionSiteName");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime?>("EmbassyDate");

                    b.Property<int>("Gender");

                    b.Property<Guid>("Identifier");

                    b.Property<int?>("MunicipalityId");

                    b.Property<string>("Name");

                    b.Property<string>("Passport");

                    b.Property<int?>("PassportCityId");

                    b.Property<int?>("PassportCountryId");

                    b.Property<string>("PhysicalPersonCode");

                    b.Property<int?>("RegionId");

                    b.Property<string>("ResidenceAddress");

                    b.Property<int?>("ResidenceCityId");

                    b.Property<int?>("ResidenceCountryId");

                    b.Property<string>("SurName");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<DateTime?>("VisaDate");

                    b.Property<DateTime?>("VisaFrom");

                    b.Property<DateTime?>("VisaTo");

                    b.Property<DateTime?>("VisaValidFrom");

                    b.Property<DateTime?>("VisaValidTo");

                    b.Property<DateTime?>("WorkPermitFrom");

                    b.Property<DateTime?>("WorkPermitTo");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("PassportCityId");

                    b.HasIndex("PassportCountryId");

                    b.HasIndex("RegionId");

                    b.HasIndex("ResidenceCityId");

                    b.HasIndex("ResidenceCountryId");

                    b.ToTable("PhysicalPersons");
                });

            modelBuilder.Entity("DomainCore.Employees.PhysicalPersonCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CardDate");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<int?>("PhysicalPersonId");

                    b.Property<string>("PlusMinus");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PhysicalPersonId");

                    b.ToTable("PhysicalPersonCards");
                });

            modelBuilder.Entity("DomainCore.Employees.PhysicalPersonDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<int?>("PhysicalPersonId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PhysicalPersonId");

                    b.ToTable("PhysicalPersonDocuments");
                });

            modelBuilder.Entity("DomainCore.Employees.PhysicalPersonItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime?>("EmbassyDate");

                    b.Property<int?>("FamilyMemberId");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Name");

                    b.Property<int?>("PhysicalPersonId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FamilyMemberId");

                    b.HasIndex("PhysicalPersonId");

                    b.ToTable("PhysicalPersonItems");
                });

            modelBuilder.Entity("DomainCore.Employees.PhysicalPersonLicence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<int?>("LicenceId");

                    b.Property<int?>("PhysicalPersonId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<DateTime?>("ValidFrom");

                    b.Property<DateTime?>("ValidTo");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LicenceId");

                    b.HasIndex("PhysicalPersonId");

                    b.ToTable("PhysicalPersonLicences");
                });

            modelBuilder.Entity("DomainCore.Employees.PhysicalPersonNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<string>("Note");

                    b.Property<DateTime>("NoteDate");

                    b.Property<int?>("PhysicalPersonId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PhysicalPersonId");

                    b.ToTable("PhysicalPersonNotes");
                });

            modelBuilder.Entity("DomainCore.Employees.PhysicalPersonProfession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("ItemStatus");

                    b.Property<int?>("PhysicalPersonId");

                    b.Property<int?>("ProfessionId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PhysicalPersonId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("PhysicalPersonProfessions");
                });

            modelBuilder.Entity("DomainCore.Limitations.Limitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("BusinessPartnerConstructionSiteLimit");

                    b.Property<int?>("CompanyId");

                    b.Property<int>("ConstructionSiteLimit");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int>("EmployeeBirthdayLimit");

                    b.Property<int>("EmployeeBusinessPartnerLimit");

                    b.Property<int>("EmployeeConstructionSiteLimit");

                    b.Property<int>("EmployeeDriveLicenceLimit");

                    b.Property<int>("EmployeeEmbasyFamilyLimit");

                    b.Property<int>("EmployeeEmbasyLimit");

                    b.Property<int>("EmployeePassportLimit");

                    b.Property<int>("EmployeeVisaLimit");

                    b.Property<int>("EmployeeVisaTakeOffLimit");

                    b.Property<int>("EmployeeWorkLicenceLimit");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("PersonDriveLicenceLimit");

                    b.Property<int>("PersonEmbasyFamilyLimit");

                    b.Property<int>("PersonEmbasyLimit");

                    b.Property<int>("PersonPassportLimit");

                    b.Property<int>("PersonVisaLimit");

                    b.Property<int>("PersonVisaTakeOffLimit");

                    b.Property<int>("PersonWorkLicenceLimit");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Limitations");
                });

            modelBuilder.Entity("DomainCore.Limitations.LimitationEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Email");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("LimitationEmails");
                });

            modelBuilder.Entity("DomainCore.Statuses.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("DomainCore.Vats.Vat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal>("Amount");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Vats");
                });

            modelBuilder.Entity("DomainCore.Banks.Bank", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartner", b =>
                {
                    b.HasOne("DomainCore.Common.Sectors.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.Sectors.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId");

                    b.HasOne("DomainCore.Common.TaxAdministrations.TaxAdministration", "TaxAdministration")
                        .WithMany()
                        .HasForeignKey("TaxAdministrationId");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerBank", b =>
                {
                    b.HasOne("DomainCore.Banks.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany("Banks")
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerBusinessPartnerType", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany("BusinessPartnerTypes")
                        .HasForeignKey("BusinessPartnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartnerType", "BusinessPartnerType")
                        .WithMany("BusinessPartnerTypes")
                        .HasForeignKey("BusinessPartnerTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerByConstructionSite", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.ConstructionSites.ConstructionSite", "ConstructionSite")
                        .WithMany()
                        .HasForeignKey("ConstructionSiteId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerDocument", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerInstitution", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerLocation", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany("Locations")
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Locations.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.Locations.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.HasOne("DomainCore.Common.Locations.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerNote", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerOrganizationUnit", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Locations.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.Locations.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerPhone", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany("Phones")
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerType", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.Companies.Company", b =>
                {
                    b.HasOne("DomainCore.Common.Locations.City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.Companies.CompanyUser", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "User")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DomainCore.Common.InputInvoices.InputInvoice", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.InputInvoices.InputInvoiceDocument", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.InputInvoices.InputInvoice", "InputInvoice")
                        .WithMany()
                        .HasForeignKey("InputInvoiceId");
                });

            modelBuilder.Entity("DomainCore.Common.InputInvoices.InputInvoiceNote", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.InputInvoices.InputInvoice", "InputInvoice")
                        .WithMany()
                        .HasForeignKey("InputInvoiceId");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.City", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.Locations.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.HasOne("DomainCore.Common.Locations.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.Country", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.Municipality", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.Locations.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.Region", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.OutputInvoices.OutputInvoice", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.OutputInvoices.OutputInvoiceDocument", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.OutputInvoices.OutputInvoice", "OutputInvoice")
                        .WithMany()
                        .HasForeignKey("OutputInvoiceId");
                });

            modelBuilder.Entity("DomainCore.Common.OutputInvoices.OutputInvoiceNote", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.OutputInvoices.OutputInvoice", "OutputInvoice")
                        .WithMany()
                        .HasForeignKey("OutputInvoiceId");
                });

            modelBuilder.Entity("DomainCore.Common.Prices.Discount", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.Prices.ServiceDelivery", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.Professions.Profession", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.Sectors.Agency", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.Sectors.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId");
                });

            modelBuilder.Entity("DomainCore.Common.Sectors.Sector", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.TaxAdministrations.TaxAdministration", b =>
                {
                    b.HasOne("DomainCore.Banks.Bank", "Bank1")
                        .WithMany()
                        .HasForeignKey("Bank1Id");

                    b.HasOne("DomainCore.Banks.Bank", "Bank2")
                        .WithMany()
                        .HasForeignKey("Bank2Id");

                    b.HasOne("DomainCore.Common.Locations.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.ToDos.ToDo", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.ConstructionSites.ConstructionSite", b =>
                {
                    b.HasOne("DomainCore.Common.Locations.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.ConstructionSites.ConstructionSiteCalculation", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.ConstructionSites.ConstructionSite", "ConstructionSite")
                        .WithMany()
                        .HasForeignKey("ConstructionSiteId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.ConstructionSites.ConstructionSiteDocument", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.ConstructionSites.ConstructionSite", "ConstructionSite")
                        .WithMany()
                        .HasForeignKey("ConstructionSiteId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.ConstructionSites.ConstructionSiteNote", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.ConstructionSites.ConstructionSite", "ConstructionSite")
                        .WithMany()
                        .HasForeignKey("ConstructionSiteId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Employees.Employee", b =>
                {
                    b.HasOne("DomainCore.Common.Locations.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.Locations.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.HasOne("DomainCore.Common.Locations.City", "PassportCity")
                        .WithMany()
                        .HasForeignKey("PassportCityId");

                    b.HasOne("DomainCore.Common.Locations.Country", "PassportCountry")
                        .WithMany()
                        .HasForeignKey("PassportCountryId");

                    b.HasOne("DomainCore.Common.Locations.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("DomainCore.Common.Locations.City", "ResidenceCity")
                        .WithMany()
                        .HasForeignKey("ResidenceCityId");

                    b.HasOne("DomainCore.Common.Locations.Country", "ResidenceCountry")
                        .WithMany()
                        .HasForeignKey("ResidenceCountryId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeByBusinessPartner", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeByConstructionSite", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.ConstructionSites.ConstructionSite", "ConstructionSite")
                        .WithMany()
                        .HasForeignKey("ConstructionSiteId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeCard", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeDocument", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeItem", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany("EmployeeItems")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DomainCore.Employees.FamilyMember", "FamilyMember")
                        .WithMany()
                        .HasForeignKey("FamilyMemberId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeLicence", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany("EmployeeLicences")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DomainCore.Employees.LicenceType", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeNote", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeProfession", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany("EmployeeProfessions")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DomainCore.Common.Professions.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");
                });

            modelBuilder.Entity("DomainCore.Employees.FamilyMember", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Employees.LicenceType", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Employees.PhysicalPerson", b =>
                {
                    b.HasOne("DomainCore.Common.Locations.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.Locations.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.HasOne("DomainCore.Common.Locations.City", "PassportCity")
                        .WithMany()
                        .HasForeignKey("PassportCityId");

                    b.HasOne("DomainCore.Common.Locations.Country", "PassportCountry")
                        .WithMany()
                        .HasForeignKey("PassportCountryId");

                    b.HasOne("DomainCore.Common.Locations.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("DomainCore.Common.Locations.City", "ResidenceCity")
                        .WithMany()
                        .HasForeignKey("ResidenceCityId");

                    b.HasOne("DomainCore.Common.Locations.Country", "ResidenceCountry")
                        .WithMany()
                        .HasForeignKey("ResidenceCountryId");
                });

            modelBuilder.Entity("DomainCore.Employees.PhysicalPersonCard", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.PhysicalPerson", "PhysicalPerson")
                        .WithMany()
                        .HasForeignKey("PhysicalPersonId");
                });

            modelBuilder.Entity("DomainCore.Employees.PhysicalPersonDocument", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.PhysicalPerson", "PhysicalPerson")
                        .WithMany()
                        .HasForeignKey("PhysicalPersonId");
                });

            modelBuilder.Entity("DomainCore.Employees.PhysicalPersonItem", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.FamilyMember", "FamilyMember")
                        .WithMany()
                        .HasForeignKey("FamilyMemberId");

                    b.HasOne("DomainCore.Employees.PhysicalPerson", "PhysicalPerson")
                        .WithMany("PhysicalPersonItems")
                        .HasForeignKey("PhysicalPersonId");
                });

            modelBuilder.Entity("DomainCore.Employees.PhysicalPersonLicence", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.LicenceType", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId");

                    b.HasOne("DomainCore.Employees.PhysicalPerson", "PhysicalPerson")
                        .WithMany("PhysicalPersonLicences")
                        .HasForeignKey("PhysicalPersonId");
                });

            modelBuilder.Entity("DomainCore.Employees.PhysicalPersonNote", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.PhysicalPerson", "PhysicalPerson")
                        .WithMany()
                        .HasForeignKey("PhysicalPersonId");
                });

            modelBuilder.Entity("DomainCore.Employees.PhysicalPersonProfession", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.PhysicalPerson", "PhysicalPerson")
                        .WithMany("PhysicalPersonProfessions")
                        .HasForeignKey("PhysicalPersonId");

                    b.HasOne("DomainCore.Common.Professions.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");
                });

            modelBuilder.Entity("DomainCore.Limitations.Limitation", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Limitations.LimitationEmail", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Statuses.Status", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Vats.Vat", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });
#pragma warning restore 612, 618
        }
    }
}
