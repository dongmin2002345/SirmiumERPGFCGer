// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryCore.Context;

namespace RepositoryCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DomainCore.Banks.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<string>("Swift");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("AgencyId");

                    b.Property<string>("Code");

                    b.Property<string>("CommercialNr");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("ContactPersonGer");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int>("DueDate");

                    b.Property<string>("IdentificationNumber");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("InternalCode");

                    b.Property<bool>("IsInPDV");

                    b.Property<string>("JBKJS");

                    b.Property<string>("Name");

                    b.Property<string>("NameGer");

                    b.Property<string>("PDV");

                    b.Property<string>("PIB");

                    b.Property<string>("PIO");

                    b.Property<decimal>("Rebate");

                    b.Property<int?>("SectorId");

                    b.Property<string>("TaxNr");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SectorId");

                    b.ToTable("BusinessPartners");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber");

                    b.Property<bool>("Active");

                    b.Property<int?>("BankId");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BusinessPartnerBanks");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerBusinessPartnerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("BusinessPartnerId");

                    b.Property<int>("BusinessPartnerTypeId");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("BusinessPartnerTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BusinessPartnerBusinessPartnerTypes");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerByConstructionSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ConstructionSiteId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("Identifier");

                    b.Property<int>("MaxNumOfEmployees");

                    b.Property<DateTime?>("RealEndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConstructionSiteId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BusinessPartnerByConstructionSites");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerByConstructionSiteHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ConstructionSiteId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConstructionSiteId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BusinessPartnerByConstructionSiteHistories");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ContactPerson");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Institution");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BusinessPartnerInstitutions");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<int?>("CityId");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int?>("MunicipalityId");

                    b.Property<int?>("RegionId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("RegionId");

                    b.ToTable("BusinessPartnerLocations");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerOrganizationUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<int?>("CityId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ContactPerson");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Mobile");

                    b.Property<int?>("MunicipalityId");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("BusinessPartnerOrganizationUnits");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime?>("Birthday");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ContactPersonFirstName");

                    b.Property<string>("ContactPersonLastName");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Mobile");

                    b.Property<string>("Phone");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BusinessPartnerPhones");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<bool>("IsBuyer");

                    b.Property<bool>("IsSupplier");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("BusinessPartnerTypes");
                });

            modelBuilder.Entity("DomainCore.Common.Companies.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<string>("BankAccountName");

                    b.Property<string>("BankAccountNo");

                    b.Property<int?>("CityId");

                    b.Property<int>("Code");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<string>("IdentificationNumber");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("IndustryCode");

                    b.Property<string>("IndustryName");

                    b.Property<string>("Name");

                    b.Property<string>("PDVNumber");

                    b.Property<string>("PIBNumber");

                    b.Property<string>("PIONumber");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("WebSite");

                    b.Property<long?>("tmpIdLong");

                    b.Property<string>("tmpIdString");

                    b.Property<decimal?>("tmpPropDecimal");

                    b.Property<long?>("tmpPropLong");

                    b.Property<string>("tmpPropString");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("DomainCore.Common.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("LastName");

                    b.Property<string>("PasswordHash");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.HasIndex("CreatedById");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DomainCore.Common.InputInvoices.InputInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<decimal>("AmountGross");

                    b.Property<decimal>("AmountNet");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<decimal>("Currency");

                    b.Property<DateTime>("DateOfPaymet");

                    b.Property<string>("Description");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNumber");

                    b.Property<decimal>("PDV");

                    b.Property<int>("PDVPercent");

                    b.Property<string>("Status");

                    b.Property<DateTime>("StatusDate");

                    b.Property<string>("Supplier");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("InputInvoices");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<int?>("MunicipalityId");

                    b.Property<string>("Name");

                    b.Property<int?>("RegionId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("AlfaCode");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Mark");

                    b.Property<string>("Name");

                    b.Property<string>("NumericCode");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("MunicipalityCode");

                    b.Property<string>("Name");

                    b.Property<int?>("RegionId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RegionId");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<string>("RegionCode");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("DomainCore.Common.OutputInvoices.OutputInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<decimal>("AmountGross");

                    b.Property<decimal>("AmountNet");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<decimal>("Currency");

                    b.Property<DateTime>("DateOfPayment");

                    b.Property<string>("Description");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNumber");

                    b.Property<decimal>("Pdv");

                    b.Property<int>("PdvPercent");

                    b.Property<string>("Status");

                    b.Property<DateTime>("StatusDate");

                    b.Property<string>("Supplier");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("OutputInvoices");
                });

            modelBuilder.Entity("DomainCore.Common.Professions.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<string>("SecondCode");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("DomainCore.Common.Sectors.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<int?>("SectorId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SectorId");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("DomainCore.Common.Sectors.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<string>("SecondCode");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("DomainCore.Common.ToDos.ToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<DateTime>("ToDoDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("ToDos");
                });

            modelBuilder.Entity("DomainCore.ConstructionSites.ConstructionSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<int?>("CityId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("ContractExpiration");

                    b.Property<DateTime>("ContractStart");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("InternalCode");

                    b.Property<int>("MaxWorkers");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("ConstructionSites");
                });

            modelBuilder.Entity("DomainCore.ConstructionSites.ConstructionSiteCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ConstructionSiteId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<decimal>("EmployeePrice");

                    b.Property<Guid>("Identifier");

                    b.Property<decimal>("NewValue");

                    b.Property<int>("NumOfEmployees");

                    b.Property<int>("NumOfMonths");

                    b.Property<decimal>("OldValue");

                    b.Property<string>("PlusMinus");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<decimal>("ValueDifference");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConstructionSiteId");

                    b.HasIndex("CreatedById");

                    b.ToTable("ConstructionSiteCalculations");
                });

            modelBuilder.Entity("DomainCore.Employees.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<int?>("CityId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ConstructionSiteCode");

                    b.Property<string>("ConstructionSiteName");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime?>("EmbassyDate");

                    b.Property<string>("EmployeeCode");

                    b.Property<int>("Gender");

                    b.Property<Guid>("Identifier");

                    b.Property<int?>("MunicipalityId");

                    b.Property<string>("Name");

                    b.Property<string>("Passport");

                    b.Property<int?>("PassportCityId");

                    b.Property<int?>("PassportCountryId");

                    b.Property<int?>("RegionId");

                    b.Property<string>("ResidenceAddress");

                    b.Property<int?>("ResidenceCityId");

                    b.Property<string>("SurName");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<DateTime?>("VisaDate");

                    b.Property<DateTime?>("VisaFrom");

                    b.Property<DateTime?>("VisaTo");

                    b.Property<DateTime?>("VisaValidFrom");

                    b.Property<DateTime?>("VisaValidTo");

                    b.Property<DateTime?>("WorkPermitFrom");

                    b.Property<DateTime?>("WorkPermitTo");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("PassportCityId");

                    b.HasIndex("PassportCountryId");

                    b.HasIndex("RegionId");

                    b.HasIndex("ResidenceCityId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeByBusinessPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime?>("RealEndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeByBusinessPartners");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeByBusinessPartnerHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeByBusinessPartnerHistories");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeByConstructionSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("BusinessPartnerId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ConstructionSiteId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime?>("RealEndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConstructionSiteId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeByConstructionSites");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeByConstructionSiteHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ConstructionSiteId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConstructionSiteId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeByConstructionSiteHistories");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CardDate");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<int?>("EmployeeId");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeCards");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("EmployeeId");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDocuments");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime?>("EmbassyDate");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("FamilyMemberId");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FamilyMemberId");

                    b.ToTable("EmployeeItems");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeLicence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("EmployeeId");

                    b.Property<Guid>("Identifier");

                    b.Property<int?>("LicenceId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<DateTime?>("ValidFrom");

                    b.Property<DateTime?>("ValidTo");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LicenceId");

                    b.ToTable("EmployeeLicences");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("EmployeeId");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Note");

                    b.Property<DateTime>("NoteDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeNotes");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeProfession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<int?>("EmployeeId");

                    b.Property<Guid>("Identifier");

                    b.Property<int?>("ProfessionId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("EmployeeProfessions");
                });

            modelBuilder.Entity("DomainCore.Employees.FamilyMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<Guid>("Identifier");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("FamilyMembers");
                });

            modelBuilder.Entity("DomainCore.Employees.LicenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Category");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<Guid>("Identifier");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("LicenceTypes");
                });

            modelBuilder.Entity("DomainCore.Banks.Bank", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartner", b =>
                {
                    b.HasOne("DomainCore.Common.Sectors.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.Sectors.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerBank", b =>
                {
                    b.HasOne("DomainCore.Banks.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany("Banks")
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerBusinessPartnerType", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany("BusinessPartnerTypes")
                        .HasForeignKey("BusinessPartnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartnerType", "BusinessPartnerType")
                        .WithMany("BusinessPartnerTypes")
                        .HasForeignKey("BusinessPartnerTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerByConstructionSite", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.ConstructionSites.ConstructionSite", "ConstructionSite")
                        .WithMany()
                        .HasForeignKey("ConstructionSiteId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerByConstructionSiteHistory", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.ConstructionSites.ConstructionSite", "ConstructionSite")
                        .WithMany()
                        .HasForeignKey("ConstructionSiteId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerInstitution", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerLocation", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany("Locations")
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Locations.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.Locations.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.HasOne("DomainCore.Common.Locations.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerOrganizationUnit", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Locations.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.Locations.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerPhone", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany("Phones")
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.BusinessPartners.BusinessPartnerType", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.Companies.Company", b =>
                {
                    b.HasOne("DomainCore.Common.Locations.City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId");

                    b.HasOne("DomainCore.Common.Locations.Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("DomainCore.Common.Identity.User", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithOne("CreatedBy")
                        .HasForeignKey("DomainCore.Common.Identity.User", "CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.InputInvoices.InputInvoice", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.City", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.Locations.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.HasOne("DomainCore.Common.Locations.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.Country", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.Municipality", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.Locations.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("DomainCore.Common.Locations.Region", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.OutputInvoices.OutputInvoice", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.Professions.Profession", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.Sectors.Agency", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.Sectors.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId");
                });

            modelBuilder.Entity("DomainCore.Common.Sectors.Sector", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Common.ToDos.ToDo", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.ConstructionSites.ConstructionSite", b =>
                {
                    b.HasOne("DomainCore.Common.Locations.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.ConstructionSites.ConstructionSiteCalculation", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.ConstructionSites.ConstructionSite", "ConstructionSite")
                        .WithMany()
                        .HasForeignKey("ConstructionSiteId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Employees.Employee", b =>
                {
                    b.HasOne("DomainCore.Common.Locations.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Common.Locations.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.HasOne("DomainCore.Common.Locations.City", "PassportCity")
                        .WithMany()
                        .HasForeignKey("PassportCityId");

                    b.HasOne("DomainCore.Common.Locations.Country", "PassportCountry")
                        .WithMany()
                        .HasForeignKey("PassportCountryId");

                    b.HasOne("DomainCore.Common.Locations.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("DomainCore.Common.Locations.City", "ResidenceCity")
                        .WithMany()
                        .HasForeignKey("ResidenceCityId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeByBusinessPartner", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeByBusinessPartnerHistory", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeByConstructionSite", b =>
                {
                    b.HasOne("DomainCore.Common.BusinessPartners.BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("BusinessPartnerId");

                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.ConstructionSites.ConstructionSite", "ConstructionSite")
                        .WithMany()
                        .HasForeignKey("ConstructionSiteId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeByConstructionSiteHistory", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.ConstructionSites.ConstructionSite", "ConstructionSite")
                        .WithMany()
                        .HasForeignKey("ConstructionSiteId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeCard", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeDocument", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeItem", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany("EmployeeItems")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DomainCore.Employees.FamilyMember", "FamilyMember")
                        .WithMany()
                        .HasForeignKey("FamilyMemberId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeLicence", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany("EmployeeLicences")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DomainCore.Employees.LicenceType", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeNote", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("DomainCore.Employees.EmployeeProfession", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DomainCore.Employees.Employee", "Employee")
                        .WithMany("EmployeeProfessions")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DomainCore.Common.Professions.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");
                });

            modelBuilder.Entity("DomainCore.Employees.FamilyMember", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DomainCore.Employees.LicenceType", b =>
                {
                    b.HasOne("DomainCore.Common.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("DomainCore.Common.Locations.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DomainCore.Common.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });
#pragma warning restore 612, 618
        }
    }
}
